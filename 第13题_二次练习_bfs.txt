class Solution {
public:
    int movingCount(int m, int n, int k) {
        if(m<=0 || n<=0)
            return -1;
        if(k==0)
            return 1;
        queue<pair<int,int>> Q;
        Q.push(make_pair(0,0));
        vector<vector<int>> visit(m,vector<int>(n,0));
        visit[0][0]=1;
        int dx[2]={0,1};
        int dy[2]={1,0};
        int currentX=0;
        int currentY=0;
        int result = 1;
        while(!Q.empty()){
            auto [x,y] = Q.front();
            Q.pop();
            for(int i=0;i<2;i++){
                currentX = x+dx[i];
                currentY = y+dy[i];
                if(currentX>=m ||currentY>=n||visit[currentX][currentY]||getSum(currentX)+getSum(currentY)>k)
                    continue;
                visit[currentX][currentY]=1;
                Q.push(make_pair(currentX,currentY));
                result++;
                
            }
        }
        return result;

    }
    int getSum(int x){
        int result = 0;
        while(x>0){
            result+=x%10;
            x/=10;
        }
        return result;
    }
};