class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {
        int row = grid.size();
        if(row==0){
            return 0;
        }
        int col = grid[0].size();
        if(col==0){
            return 0;
        }
        vector<int> result;
        int resultOfOnePath=0;
        findMaxValue(0,0,grid,row,col,result,resultOfOnePath);
        sort(result.begin(),result.end(),greater<int>());
        return result[0];
    }
    void findMaxValue(int curRow,int curCol,vector<vector<int> >& grid,int row,int col,vector<int>& result,int resultOfOnePath){
        if(curRow==row-1 && curCol==col-1){
            resultOfOnePath+=grid[curRow][curCol];
            result.push_back(resultOfOnePath);
            return;
        }
        resultOfOnePath+=grid[curRow][curCol];
        if(curRow<row-1){
            findMaxValue(curRow+1,curCol,grid,row,col,result,resultOfOnePath);
        }
        if(curCol<col-1){
            findMaxValue(curRow,curCol+1,grid,row,col,result,resultOfOnePath);
        }

    }
};